单例模式
    保证从系统启动到系统停止，全过程只会产生一个实例
    在应用中遇到功能性冲突时，需要使用单例模式


使用静态内部类的作用:

    懒加载:静态内部类的加载不需要依附外部类，在使用时才加载
    考虑反射：由于在调用 SingletonHolder.instance 的时候，才会对单例进行初始化，而且通过反射，是不能从外部类获取内部类的属性的,很好的避免了反射入侵
    考虑多线程：由于静态内部类的特性，只有在其被第一次引用的时候才会被加载，所以可以保证其线程安全性

    优势：兼顾了懒汉模式的内存优化（使用时才初始化）以及饿汉模式的安全性（不会被反射入侵）
    劣势：需要两个类去做到这一点，虽然不会创建静态内部类的对象，但是其 Class 对象还是会被创建，而且是属于永久带的对象。创建的单例，一旦在后期被销毁，不能重新创建













































